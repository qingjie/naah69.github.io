<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法应用 on </title>
    <link>https://www.naah69.com/tags/%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/</link>
    <description>Recent content in 算法应用 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 09 Sep 2017 11:46:51 +0800</lastBuildDate>
    
	<atom:link href="https://www.naah69.com/tags/%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>算法基础之回溯算法</title>
      <link>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 09 Sep 2017 11:46:51 +0800</pubDate>
      
      <guid>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</guid>
      <description>回溯算法 回溯法（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到</description>
    </item>
    
    <item>
      <title>算法基础之动态规划</title>
      <link>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Sat, 09 Sep 2017 11:43:36 +0800</pubDate>
      
      <guid>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>动态规划 把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划 算法应用 最长公共子</description>
    </item>
    
    <item>
      <title>算法基础之分治算法</title>
      <link>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 09 Sep 2017 11:39:38 +0800</pubDate>
      
      <guid>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/</guid>
      <description>分治算法 分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原</description>
    </item>
    
    <item>
      <title>算法基础之贪心算法</title>
      <link>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 09 Sep 2017 11:33:44 +0800</pubDate>
      
      <guid>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>贪心算法 贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意</description>
    </item>
    
    <item>
      <title>算法基础之穷举算法</title>
      <link>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%A9%B7%E4%B8%BE%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 09 Sep 2017 11:28:38 +0800</pubDate>
      
      <guid>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%A9%B7%E4%B8%BE%E7%AE%97%E6%B3%95/</guid>
      <description>穷举算法 穷举法的基本思想是根据题目的部分条件确定答案的大致范围，并在此范围内对所有可能的情况逐一验证，直到全部情况验证完毕。若某个情况验证符</description>
    </item>
    
    <item>
      <title>算法基础之递归算法</title>
      <link>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 09 Sep 2017 11:24:55 +0800</pubDate>
      
      <guid>https://www.naah69.com/post/2017-09-09-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</guid>
      <description>递归算法 递归算法是把问题转化为规模缩小了的同类问题的子问题。然后 递归调用函数（或过程）来表示问题的解。 一个过程(或函数)直接或间接调用自己本</description>
    </item>
    
  </channel>
</rss>